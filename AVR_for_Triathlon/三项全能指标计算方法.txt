对于第一个场景(128 bytes CBC mode)
	1. 包括密钥扩展、加密、解密3部分;
	2. 初始密钥和常量（比如Simon中的Z）放在Flash中；
	3. 要加密的数据、所有轮密钥、初始向量(vector)存放在RAM中；另外一些辅助数据也存放在RAM中，比如Speck中密钥扩展用到的L，Simon和Speck解密中需要临时保存密文(tempCipher)
	4. 开始计算时间前：初始密钥已经转移到RAM中，明文初始化已完成，初始向量也已经初始化。因此这些时间和代码不计算在最终的结果中。
	4. Encryption + Decryption(including key schedule)
		Flash：3部分的代码量之和；
		RAM：  整个工程需要的所有RAM空间，包括加密数据、密钥、初始向量，以及可能用到的辅助数据
		Time： Key Schedule、Encryption、Decryption三部分时间之和；
	5. Encryption(without key schedule)包括：加载明文，加载初始向量，明文加密，密文写回，后续明文块加密；
		Flash：加密部分的指令；
		RAM：  这里只计算初始向量vector（不太明白单独计算encryption和decryption RAM消耗的目的，不清楚具体怎么计算的）；
		Time： 在加密前、加密结束时进行cycles记录，相减得到加密的时间；
	6. Decryption(without key schedule)包括：加载密文，加载初始向量，解密，写回明文，解密后续密文；
		Flash：解密部分的指令；
		RAM:   初始向量vector和保存临时密文的tempCipher;
		Time:  分别在解密前、解密结束时进行cycles记录，相减得到解密的时间；
		
对于第二个场景(128 bits CTR mode)
	1. 轮密钥和nonce放在Flash中，没有密钥扩展程序；
	2. 要加密的数据和计数器（counter)都存放在RAM中；采用的方式是nonce和counter先异或，再对结果进行加密最后与明文进行异或得到密文；因此nonce、counter的二进制位数等于一个block的大小；
	3. 没有解密的部分；
	4. 加密数据和counter的初始化代码不计算在整个Flash消耗中，时间消耗也是在初始化完成之后开始计算；